import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np
import pandas as pd

column_names = ['MPG','Cylinders','Displacement','Horsepower','Weight',
                'Acceleration', 'Model Year', 'Origin']
raw_dataset = pd.read_csv('e:/tensorflow/dataset_path.txt', names=column_names,
                      na_values = "?", comment='\t',
                      sep=" ", skipinitialspace=True)
dataset = raw_dataset.copy()
dataset.tail()             #观察表格结构尾部#

dataset['Horsepower'].fillna(dataset['Horsepower'].mean(),inplace=True)
dataset.info()
dataset.isna().sum()          #处理空白项，并查看统计#

dataset['USA'] = (dataset['Origin']== 1)*1.0
dataset['Europe'] = (dataset['Origin']== 2)*1.0
dataset['Japan'] = (dataset['Origin'] == 3)*1.0
dataset.tail()

datatrain= dataset.sample(frac=0.85,random_state=0)#数据分割成训练集和测试集#
test_dataset = dataset.drop(data.train.index)
datatest=test_dataset[['Cylinders','Displacement','Horsepower','Weight','Acceleration','Model Year','USA','Europe','Japan']]
labeltest=test_dataset['MPG']#测试集数据和标签#

datauseful=datatrain[['Cylinders','Displacement','Horsepower','Weight','Acceleration','Model Year','USA','Europe','Japan']]
labeltrain=datatrain['MPG']   #训练集数据和标签#

train_stats = datauseful.describe()
train_stats = train_stats.transpose()  #计算总样本标准差和平均值，翻转方便下一步处理#
def norm(x):
  return (x - train_stats['mean']) / train_stats['std'] #数据预处理，减小每一项的误差#
datatrainnorm= norm(datausefull) #只标准化训练数据#
 
#创造训练模型#
def build_model():
  model = keras.Sequential([
    layers.Dense(64, activation=tf.nn.relu, input_shape=[len(datatrainnorm.keys())]),
    layers.Dense(64, activation=tf.nn.relu),
    layers.Dense(1)
  ])

  optimizer = tf.keras.optimizers.RMSprop(0.001)

  model.compile(loss='mse',
                optimizer=optimizer,
                metrics=['mae', 'mse'])
  return model
  model = build_model()
  
 #创建进度条#
class PrintDot(keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs):
    if epoch % 100 == 0: print('')
    print('.', end='')
EPOCHS = 1000

early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)

history = model.fit(normed_train_data, train_labels, epochs=EPOCHS,
                    validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])

plot_history(history)

test_predictions = model.predict(normed_test_data).flatten()
